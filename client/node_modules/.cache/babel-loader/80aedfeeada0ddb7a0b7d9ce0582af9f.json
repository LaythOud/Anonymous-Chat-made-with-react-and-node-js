{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Peer from 'peerjs';\nexport default function PeerJs(props) {\n  _s();\n\n  // eslint-disable-next-line\n  const [peer, setPeer] = useState();\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3002'\n  });\n  myPeer.on('open', id => {\n    document.getElementById(\"peerID\").textContent = id;\n  });\n  let myVideo = document.getElementById('me');\n  myPeer.on('call', call => {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream, 0);\n        call.answer(stream);\n        const video = document.getElementById('me');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  });\n\n  function connectToNewUser(userId) {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream, 0);\n        const call = myPeer.call(userId, stream);\n        const video = document.getElementById('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n        call.on('close', () => {\n          video.remove();\n        });\n        setPeer(call);\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  }\n\n  function addVideoStream(video, stream, check) {\n    if (!check) {\n      video = document.getElementById('me');\n      video.muted = true;\n    } else video = document.getElementById('friend');\n\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data);\n        break;\n\n      case 'user-disconnected':\n        if (peer) peer.close();\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n\n_s(PeerJs, \"p56Totgs8pg4ovXiW/drLUKvarc=\");\n\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["useState","Peer","PeerJs","props","peer","setPeer","myPeer","undefined","host","port","on","id","document","getElementById","textContent","myVideo","call","navigator","mediaDevices","getUserMedia","video","audio","then","stream","addVideoStream","answer","userVideoStream","catch","err","console","log","connectToNewUser","userId","remove","check","muted","srcObject","addEventListener","play","socket","event","messageObj","JSON","parse","data","type","close"],"mappings":"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","sourcesContent":["import  { useState } from 'react';\nimport Peer from 'peerjs'\n\nexport default function PeerJs(props) {\n\n// eslint-disable-next-line\n const [peer , setPeer] = useState()\n\n const myPeer = new Peer(undefined ,{\n    host:'/',\n    port:'3002'\n })\n\n\n myPeer.on('open' , id=>{\n\t document.getElementById(\"peerID\").textContent = id\n })\n\n\nlet myVideo = document.getElementById('me')\n\nmyPeer.on('call' , call =>{\n\tif(navigator.mediaDevices){\n\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\tvideo:true,\n\t\t\taudio:true\n\t\t}).then(stream =>{\n\t\t\n\t\t\taddVideoStream(myVideo , stream , 0) \n\t\t\tcall.answer(stream)\n\t\t\tconst video = document.getElementById('me')\n\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\taddVideoStream(video , userVideoStream , 1)\n\t\t\t})\n\t\t}).catch(err=>{\n\t\t\tconsole.log(\"Error:\" , err)\n\t\t})\n\t}\n})\n\nfunction connectToNewUser(userId) {\n\tif(navigator.mediaDevices){\n\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\tvideo:true,\n\t\t\taudio:true\n\t\t}).then(stream =>{\n\n\t\t\taddVideoStream(myVideo , stream , 0)\n\t\t\tconst call = myPeer.call(userId ,stream)\n\t\t\tconst video = document.getElementById('friend')\n\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\taddVideoStream(video , userVideoStream , 1) \n\t\t\t})\n\t\t\tcall.on('close' ,()=>{\n\t\t\t\tvideo.remove()\n\t\t\t})\n\t\t\tsetPeer(call)\n\n\t\t}).catch(err=>{\n\t\t\tconsole.log(\"Error:\" , err)\n\t\t})\n\t}\n}\n\n function addVideoStream(video , stream , check) {\n\tif(!check){\n\t\t video = document.getElementById('me')\n\t\t video.muted  = true\n\t}\n\telse video = document.getElementById('friend')\n\n \tvideo.srcObject = stream\n \tvideo.addEventListener('loadedmetadata',() =>{\n \t\tvideo.play();\n \t})\n }\n\n\n\n\n props.socket.addEventListener('message' , event =>{\n\tconst messageObj = JSON.parse(event.data)\n\tswitch (messageObj.type) {\n\t\tcase 'user-connected':\n\t\t\tconnectToNewUser(messageObj.data)\n\t\tbreak\n\t\tcase 'user-disconnected':\n\t\t\tif(peer) peer.close()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n})\n\n\nreturn ('')\n}"]},"metadata":{},"sourceType":"module"}