{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransmissionHandler = void 0;\n\nconst enums_1 = require(\"../../../enums\");\n\nconst TransmissionHandler = ({\n  realm\n}) => {\n  const handle = (client, message) => {\n    const type = message.type;\n    const srcId = message.src;\n    const dstId = message.dst;\n    const destinationClient = realm.getClientById(dstId); // User is connected!\n\n    if (destinationClient) {\n      const socket = destinationClient.getSocket();\n\n      try {\n        if (socket) {\n          const data = JSON.stringify(message);\n          socket.send(data);\n        } else {\n          // Neither socket no res available. Peer dead?\n          throw new Error(\"Peer dead\");\n        }\n      } catch (e) {\n        // This happens when a peer disconnects without closing connections and\n        // the associated WebSocket has not closed.\n        // Tell other side to stop trying.\n        if (socket) {\n          socket.close();\n        } else {\n          realm.removeClientById(destinationClient.getId());\n        }\n\n        handle(client, {\n          type: enums_1.MessageType.LEAVE,\n          src: dstId,\n          dst: srcId\n        });\n      }\n    } else {\n      // Wait for this client to connect/reconnect (XHR) for important\n      // messages.\n      const ignoredTypes = [enums_1.MessageType.LEAVE, enums_1.MessageType.EXPIRE];\n\n      if (!ignoredTypes.includes(type) && dstId) {\n        realm.addMessageToQueue(dstId, message);\n      } else if (type === enums_1.MessageType.LEAVE && !dstId) {\n        realm.removeClientById(srcId);\n      } else {// Unavailable destination specified with message LEAVE or EXPIRE\n        // Ignore\n      }\n    }\n\n    return true;\n  };\n\n  return handle;\n};\n\nexports.TransmissionHandler = TransmissionHandler;","map":{"version":3,"sources":["/usr/local/lib/node_modules/peer/dist/src/messageHandler/handlers/transmission/index.js"],"names":["Object","defineProperty","exports","value","TransmissionHandler","enums_1","require","realm","handle","client","message","type","srcId","src","dstId","dst","destinationClient","getClientById","socket","getSocket","data","JSON","stringify","send","Error","e","close","removeClientById","getId","MessageType","LEAVE","ignoredTypes","EXPIRE","includes","addMessageToQueue"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMF,mBAAmB,GAAG,CAAC;AAAEG,EAAAA;AAAF,CAAD,KAAe;AACvC,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAChC,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;AACA,UAAMC,KAAK,GAAGF,OAAO,CAACG,GAAtB;AACA,UAAMC,KAAK,GAAGJ,OAAO,CAACK,GAAtB;AACA,UAAMC,iBAAiB,GAAGT,KAAK,CAACU,aAAN,CAAoBH,KAApB,CAA1B,CAJgC,CAKhC;;AACA,QAAIE,iBAAJ,EAAuB;AACnB,YAAME,MAAM,GAAGF,iBAAiB,CAACG,SAAlB,EAAf;;AACA,UAAI;AACA,YAAID,MAAJ,EAAY;AACR,gBAAME,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAAb;AACAQ,UAAAA,MAAM,CAACK,IAAP,CAAYH,IAAZ;AACH,SAHD,MAIK;AACD;AACA,gBAAM,IAAII,KAAJ,CAAU,WAAV,CAAN;AACH;AACJ,OATD,CAUA,OAAOC,CAAP,EAAU;AACN;AACA;AACA;AACA,YAAIP,MAAJ,EAAY;AACRA,UAAAA,MAAM,CAACQ,KAAP;AACH,SAFD,MAGK;AACDnB,UAAAA,KAAK,CAACoB,gBAAN,CAAuBX,iBAAiB,CAACY,KAAlB,EAAvB;AACH;;AACDpB,QAAAA,MAAM,CAACC,MAAD,EAAS;AACXE,UAAAA,IAAI,EAAEN,OAAO,CAACwB,WAAR,CAAoBC,KADf;AAEXjB,UAAAA,GAAG,EAAEC,KAFM;AAGXC,UAAAA,GAAG,EAAEH;AAHM,SAAT,CAAN;AAKH;AACJ,KA5BD,MA6BK;AACD;AACA;AACA,YAAMmB,YAAY,GAAG,CAAC1B,OAAO,CAACwB,WAAR,CAAoBC,KAArB,EAA4BzB,OAAO,CAACwB,WAAR,CAAoBG,MAAhD,CAArB;;AACA,UAAI,CAACD,YAAY,CAACE,QAAb,CAAsBtB,IAAtB,CAAD,IAAgCG,KAApC,EAA2C;AACvCP,QAAAA,KAAK,CAAC2B,iBAAN,CAAwBpB,KAAxB,EAA+BJ,OAA/B;AACH,OAFD,MAGK,IAAIC,IAAI,KAAKN,OAAO,CAACwB,WAAR,CAAoBC,KAA7B,IAAsC,CAAChB,KAA3C,EAAkD;AACnDP,QAAAA,KAAK,CAACoB,gBAAN,CAAuBf,KAAvB;AACH,OAFI,MAGA,CACD;AACA;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAnDD;;AAoDA,SAAOJ,MAAP;AACH,CAtDD;;AAuDAN,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransmissionHandler = void 0;\nconst enums_1 = require(\"../../../enums\");\nconst TransmissionHandler = ({ realm }) => {\n    const handle = (client, message) => {\n        const type = message.type;\n        const srcId = message.src;\n        const dstId = message.dst;\n        const destinationClient = realm.getClientById(dstId);\n        // User is connected!\n        if (destinationClient) {\n            const socket = destinationClient.getSocket();\n            try {\n                if (socket) {\n                    const data = JSON.stringify(message);\n                    socket.send(data);\n                }\n                else {\n                    // Neither socket no res available. Peer dead?\n                    throw new Error(\"Peer dead\");\n                }\n            }\n            catch (e) {\n                // This happens when a peer disconnects without closing connections and\n                // the associated WebSocket has not closed.\n                // Tell other side to stop trying.\n                if (socket) {\n                    socket.close();\n                }\n                else {\n                    realm.removeClientById(destinationClient.getId());\n                }\n                handle(client, {\n                    type: enums_1.MessageType.LEAVE,\n                    src: dstId,\n                    dst: srcId\n                });\n            }\n        }\n        else {\n            // Wait for this client to connect/reconnect (XHR) for important\n            // messages.\n            const ignoredTypes = [enums_1.MessageType.LEAVE, enums_1.MessageType.EXPIRE];\n            if (!ignoredTypes.includes(type) && dstId) {\n                realm.addMessageToQueue(dstId, message);\n            }\n            else if (type === enums_1.MessageType.LEAVE && !dstId) {\n                realm.removeClientById(srcId);\n            }\n            else {\n                // Unavailable destination specified with message LEAVE or EXPIRE\n                // Ignore\n            }\n        }\n        return true;\n    };\n    return handle;\n};\nexports.TransmissionHandler = TransmissionHandler;\n"]},"metadata":{},"sourceType":"script"}