{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Peer from 'peerjs';\nexport default function PeerJs(props) {\n  _s();\n\n  const [streamClient, setStreamClient] = useState();\n  const [peer, setPeer] = useState();\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3001'\n  });\n  const myVideo = document.createElement('video');\n  myVideo.muted = true;\n  const videoGrid = document.getElementById('video-grid');\n\n  if (navigator.mediaDevices) {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      addVideoStream(myVideo, stream);\n      setStreamClient(stream);\n      myPeer.on('call', call => {\n        call.answer(stream);\n        const video = document.createElement('video');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n      });\n    });\n  }\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream);\n    const video = document.createElement('video');\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    setPeer(call);\n  }\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n\n    try {\n      videoGrid.append(video);\n    } catch {\n      videoGrid = document.getElementById('video-grid');\n      videoGrid.append(video);\n    }\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data, streamClient);\n        break;\n\n      case 'user-disconnected':\n        if (peer) peer.close();\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n\n_s(PeerJs, \"PleBH3HFBlVgdcIEvzh9ox+0TOg=\");\n\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["useState","Peer","PeerJs","props","streamClient","setStreamClient","peer","setPeer","myPeer","undefined","host","port","myVideo","document","createElement","muted","videoGrid","getElementById","navigator","mediaDevices","getUserMedia","video","audio","then","stream","addVideoStream","on","call","answer","userVideoStream","connectToNewUser","userId","remove","srcObject","addEventListener","play","append","socket","event","messageObj","JSON","parse","data","type","close"],"mappings":"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","sourcesContent":["import  { useState } from 'react';\nimport Peer from 'peerjs'\n\nexport default function PeerJs(props) {\n\n\n const [streamClient , setStreamClient] = useState()\n const [peer , setPeer] = useState()\n\n const myPeer = new Peer(undefined ,{\n    host:'/',\n    port:'3001'\n})\n\n\nconst myVideo = document.createElement('video')\nmyVideo.muted = true\nconst videoGrid = document.getElementById('video-grid')\n\nif(navigator.mediaDevices){\n\tnavigator.mediaDevices.getUserMedia({\n\t\tvideo:true,\n\t\taudio:true\n\t}).then(stream =>{\n\t\taddVideoStream(myVideo , stream)\n\t\tsetStreamClient(stream)\n\n\t\tmyPeer.on('call' , call =>{\n\t\t\tcall.answer(stream)\n\t\t\tconst video = document.createElement('video')\n\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\taddVideoStream(video , userVideoStream)\n\t\t\t})\n\t\t})\n\t\t\n\t})\n}\n\nfunction connectToNewUser(userId ,stream) {\n\tconst call = myPeer.call(userId ,stream)\n\tconst video = document.createElement('video')\n\tcall.on('stream' , userVideoStream =>{\n\t\taddVideoStream(video , userVideoStream)\n\t})\n\tcall.on('close' ,()=>{\n\t\tvideo.remove()\n    })\n    setPeer(call)\n}\n\n function addVideoStream(video , stream) {\n \tvideo.srcObject = stream\n \tvideo.addEventListener('loadedmetadata',() =>{\n \t\tvideo.play();\n \t})\n \ttry{\n\t\tvideoGrid.append(video)\n\t}catch{\n\t\tvideoGrid = document.getElementById('video-grid') \n\t\tvideoGrid.append(video)\n\t}\n }\n\n\n props.socket.addEventListener('message' , event =>{\n    const messageObj = JSON.parse(event.data)\n    switch (messageObj.type) {\n        case 'user-connected':\n            connectToNewUser(messageObj.data ,streamClient)\n            break\n        case 'user-disconnected':\n            if(peer) peer.close()\n            break\n        default:\n            break\n    }\n})\n\nreturn ('')\n}"]},"metadata":{},"sourceType":"module"}