{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.url = void 0;\n\nconst parseuri = require(\"parseuri\");\n\nconst debug = require(\"debug\")(\"socket.io-client:url\");\n/**\n * URL parser.\n *\n * @param uri - url\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\n\n\nfunction url(uri, loc) {\n  let obj = uri; // default to window.location\n\n  loc = loc || typeof location !== \"undefined\" && location;\n  if (null == uri) uri = loc.protocol + \"//\" + loc.host; // relative path support\n\n  if (typeof uri === \"string\") {\n    if (\"/\" === uri.charAt(0)) {\n      if (\"/\" === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug(\"protocol-less url %s\", uri);\n\n      if (\"undefined\" !== typeof loc) {\n        uri = loc.protocol + \"//\" + uri;\n      } else {\n        uri = \"https://\" + uri;\n      }\n    } // parse\n\n\n    debug(\"parse %s\", uri);\n    obj = parseuri(uri);\n  } // make sure we treat `localhost:80` and `localhost` equally\n\n\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = \"80\";\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = \"443\";\n    }\n  }\n\n  obj.path = obj.path || \"/\";\n  const ipv6 = obj.host.indexOf(\":\") !== -1;\n  const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host; // define unique id\n\n  obj.id = obj.protocol + \"://\" + host + \":\" + obj.port; // define href\n\n  obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n  return obj;\n}\n\nexports.url = url;","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/node_modules/socket.io-client/build/url.js"],"names":["Object","defineProperty","exports","value","url","parseuri","require","debug","uri","loc","obj","location","protocol","host","charAt","test","port","path","ipv6","indexOf","id","href"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.url = void 0;\nconst parseuri = require(\"parseuri\");\nconst debug = require(\"debug\")(\"socket.io-client:url\");\n/**\n * URL parser.\n *\n * @param uri - url\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            debug(\"protocol-less url %s\", uri);\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        debug(\"parse %s\", uri);\n        obj = parseuri(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\nexports.url = url;\n"]},"metadata":{},"sourceType":"script"}