{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './Style/App.css';\nimport Home from './Component/Home';\nimport React, { useState } from 'react';\nimport { useSocket } from './Provider/SocketProvider';\nimport IDStorage from \"./Storage/IDStorage\";\nimport SessionStorage from \"./Storage/SessionStorage\";\nimport Call from './Component/Call';\nimport Alert from './Component/Alert';\nimport { PeerProvider } from './Provider/PeerProvider';\nimport Message from './Component/Message';\nexport default function App() {\n  _s();\n\n  const socket = useSocket();\n  const [display, setDisplay] = SessionStorage('display', 'Home');\n  const [roomID, setRoomID] = SessionStorage('roomID', '');\n  const [chatLog, setChatLog] = SessionStorage('chatLog', \"\");\n  const [ID, setID] = IDStorage('ID', 'undefined');\n  const [message, setMessage] = useState(\"\");\n  /* ///////////////////////////////////////////////////////////////// */\n\n  socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'Add-Success':\n        setID(messageObj.data);\n        break;\n\n      case 'Set-Display':\n        setDisplay(messageObj.data);\n        break;\n\n      case 'Set-RoomID':\n        setRoomID(messageObj.data);\n        break;\n\n      case 'Double-ID-Valid':\n        setMessage(\"You already have ID\");\n        break;\n\n      case 'ID-Not-Valid':\n        setMessage(\"You must have ID befor get in a room\");\n        break;\n\n      case 'Room-NotEmpty-Valid':\n        setMessage(\"Sorry, Room is Full\");\n        break;\n\n      case 'RoomID-Not-Valid':\n        setMessage(\"Sorry, RoomID is Wrong\");\n        break;\n\n      case 'message-recive':\n        setChatLog(props.chatLog + ',' + messageObj.data.sender + ',' + messageObj.data.message);\n        break;\n\n      default:\n        break;\n    }\n  });\n  socket.addEventListener('open', event => {\n    socket.send(JSON.stringify({\n      type: 'Refresh-Client',\n      data: [localStorage.getItem('Anonymous-Chat-ID'), window.sessionStorage.getItem('Anonymous-Chat-display'), window.sessionStorage.getItem('Anonymous-Chat-roomID')]\n    }));\n  });\n  /* ///////////////////////////////////////////////////////////////// */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [message !== \"\" ? /*#__PURE__*/_jsxDEV(Alert, {\n      message: message,\n      setMessage: setMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }, this) : '', display === \"Message\" ? /*#__PURE__*/_jsxDEV(Message, {\n      ID: ID,\n      setDisplay: setDisplay,\n      roomID: roomID,\n      chatLog: chatLog,\n      setChatLog: setChatLog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this) : display === \"Call\" ? /*#__PURE__*/_jsxDEV(PeerProvider, {\n      children: /*#__PURE__*/_jsxDEV(Call, {\n        setDisplay: setDisplay,\n        ID: ID,\n        socket: socket,\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Home, {\n      socket: socket,\n      ID: ID,\n      setDisplay: setDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HYNotgHPuhYVHqalg3T3PnHmdOs=\", false, function () {\n  return [useSocket];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/App.js"],"names":["Home","React","useState","useSocket","IDStorage","SessionStorage","Call","Alert","PeerProvider","Message","App","socket","display","setDisplay","roomID","setRoomID","chatLog","setChatLog","ID","setID","message","setMessage","addEventListener","event","messageObj","JSON","parse","data","type","props","sender","send","stringify","localStorage","getItem","window","sessionStorage"],"mappings":"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","sourcesContent":["import './Style/App.css';\nimport Home from './Component/Home';\nimport React, { useState } from 'react';\nimport {useSocket} from './Provider/SocketProvider'\nimport IDStorage from \"./Storage/IDStorage\";\nimport SessionStorage from \"./Storage/SessionStorage\"\nimport Call from './Component/Call'\nimport Alert from './Component/Alert'\nimport {PeerProvider} from './Provider/PeerProvider'\nimport Message from './Component/Message'\n\nexport default function App() {\n \n  const socket = useSocket();\n  const [display , setDisplay ] = SessionStorage('display','Home');\n  const [roomID , setRoomID ] = SessionStorage('roomID','');\n  const [chatLog , setChatLog] = SessionStorage('chatLog' ,\"\")\n  const [ID , setID] = IDStorage('ID' ,  'undefined')\n  const [message , setMessage] = useState(\"\")\n/* ///////////////////////////////////////////////////////////////// */\n\n  socket.addEventListener('message' , event =>{\n    const messageObj = JSON.parse(event.data)\n    switch (messageObj.type) {\n      case 'Add-Success':\n        setID(messageObj.data)\n        break\n      case 'Set-Display':\n        setDisplay(messageObj.data)\n        break\n      case 'Set-RoomID':\n        setRoomID(messageObj.data)\n        break\n      case 'Double-ID-Valid':\n        setMessage(\"You already have ID\")\n        break\n      case 'ID-Not-Valid':\n        setMessage(\"You must have ID befor get in a room\")\n        break\n      case 'Room-NotEmpty-Valid':\n        setMessage(\"Sorry, Room is Full\")\n        break\n      case 'RoomID-Not-Valid':\n        setMessage(\"Sorry, RoomID is Wrong\")\n        break\n      case 'message-recive':\n        setChatLog(props.chatLog +','+ messageObj.data.sender+','+ messageObj.data.message )\n        break\n      default:\n        break\n    }\n  })\n\n  socket.addEventListener('open' , event =>{\n    socket.send(JSON.stringify({\n        type:'Refresh-Client',\n        data:[\n          localStorage.getItem('Anonymous-Chat-ID') ,\n          window.sessionStorage.getItem('Anonymous-Chat-display'),\n          window.sessionStorage.getItem('Anonymous-Chat-roomID')\n        ]\n    }))\n  })\n  \n/* ///////////////////////////////////////////////////////////////// */\n  return (\n    <div className=\"App\">\n      { message !== \"\"? <Alert message={message} setMessage={setMessage}/>:'' }\n      { display === \"Message\"?\n          <Message ID={ID} setDisplay={setDisplay} roomID={roomID} chatLog={chatLog} setChatLog={setChatLog}/>:\n          display === \"Call\"?\n            <PeerProvider><Call setDisplay={setDisplay} ID={ID} socket={socket} roomID={roomID} /></PeerProvider>:\n            <Home socket={socket} ID={ID} setDisplay={setDisplay} /> \n     }\n   </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}