{"ast":null,"code":"export default function PeerJs(props) {\n  props.myVideo = document.getElementById('me');\n  props.myPeer.on('call', call => {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        // props.peer = call\n        console.log(call);\n        addVideoStream(props.myVideo, stream, 0);\n        call.answer(stream);\n        props.video = document.getElementById('me');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n        call.on('close', () => {\n          video.remove();\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  }); // props.myPeer.on('disconnected',  ()=> {\n  // \tif(!props.myPeer.destroyed){\n  // \t\tconsole.log('Connection lost. Please reconnect');\n  // \t\tprops.myPeer.reconnect(); \n  // \t\t// props.socket.send(JSON.stringify({\n  // \t\t// \ttype:'Refresh-Call',\n  // \t\t// \tdata:props.roomID\n  // \t\t// }))\n  // \t}\n  // });\n\n  function connectToNewUser(userId) {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(props.myVideo, stream, 0);\n        const call = props.myPeer.call(userId, stream);\n        props.video = document.getElementById('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n        call.on('close', () => {\n          video.remove();\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  }\n\n  function addVideoStream(video, stream, check) {\n    if (!check) {\n      video = document.getElementById('me');\n      video.muted = true;\n    } else video = document.getElementById('friend');\n\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data);\n        break;\n    }\n  });\n  return '';\n}\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["PeerJs","props","myVideo","document","getElementById","myPeer","on","call","navigator","mediaDevices","getUserMedia","video","audio","then","stream","console","log","addVideoStream","answer","userVideoStream","remove","catch","err","connectToNewUser","userId","check","muted","srcObject","addEventListener","play","socket","event","messageObj","JSON","parse","data","type"],"mappings":"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","sourcesContent":["\nexport default function PeerJs(props) {\n\t\n\t props.myVideo = document.getElementById('me')\n\n\tprops.myPeer.on('call' , call =>{\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\t\t\t\t// props.peer = call\n\t\t\t\tconsole.log(call)\n\t\t\t\taddVideoStream(props.myVideo , stream , 0) \n\t\t\t\tcall.answer(stream)\n\t\t\t\tprops.video = document.getElementById('me')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1)\n\t\t\t\t})\n\t\t\t\tcall.on('close' ,()=>{\n\t\t\t\t\tvideo.remove()\n\t\t\t\t})\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t})\n\n\t// props.myPeer.on('disconnected',  ()=> {\n\t// \tif(!props.myPeer.destroyed){\n\t// \t\tconsole.log('Connection lost. Please reconnect');\n\t// \t\tprops.myPeer.reconnect(); \n\t// \t\t// props.socket.send(JSON.stringify({\n\t// \t\t// \ttype:'Refresh-Call',\n\t// \t\t// \tdata:props.roomID\n\t// \t\t// }))\n\t// \t}\n\t// });\n\n\tfunction connectToNewUser(userId) {\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\n\t\t\t\taddVideoStream(props.myVideo , stream , 0)\n\t\t\t\tconst call = props.myPeer.call(userId ,stream)\n\t\t\t\tprops.video = document.getElementById('friend')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1) \n\t\t\t\t})\n\t\t\t\tcall.on('close' ,()=>{\n\t\t\t\t\tvideo.remove()\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction addVideoStream(video , stream , check) {\n\t\tif(!check){\n\t\t\tvideo = document.getElementById('me')\n\t\t\tvideo.muted  = true\n\t\t}\n\t\telse video = document.getElementById('friend')\n\n\t\tvideo.srcObject = stream\n\t\tvideo.addEventListener('loadedmetadata',() =>{\n\t\t\tvideo.play();\n\t\t})\n\t}\n\n\tprops.socket.addEventListener('message' , event =>{\n\t\tconst messageObj = JSON.parse(event.data)\n\t\tswitch (messageObj.type) {\n\t\t\tcase 'user-connected':\n\t\t\t\tconnectToNewUser(messageObj.data)\n\t\t\t\tbreak\n\t\t}\n\t})\n\n\n\treturn ('')\n}"]},"metadata":{},"sourceType":"module"}