{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Peer from 'peerjs';\nexport default function PeerJs(props) {\n  _s();\n\n  // eslint-disable-next-line\n  let streamClient;\n  const [peer, setPeer] = useState();\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3002'\n  });\n  let myVideo = document.getElementById('me');\n\n  if (navigator.mediaDevices) {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      console.log(0);\n      addVideoStream(myVideo, stream);\n      streamClient = stream;\n      props.socket.addEventListener('message', event => {\n        const messageObj = JSON.parse(event.data);\n\n        switch (messageObj.type) {\n          case 'user-connected':\n            connectToNewUser(messageObj.data, streamClient);\n            break;\n\n          case 'user-disconnected':\n            if (peer) peer.close();\n            break;\n\n          default:\n            break;\n        }\n      });\n      myPeer.on('call', call => {\n        console.log(2, streamClient);\n        call.answer(streamClient);\n        const video = document.createElement('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n      });\n    }).catch(err => {\n      console.log(\"Error:\", err);\n    });\n  } // myPeer.on('open' , id=>{\n  // \tconsole.log(1)\n  // \tprops.socket.send(JSON.stringify({\n  // \t\ttype:'join-room',\n  // \t\tdata:[props.roomID , props.ID]\n  // \t  }))\n  // })\n\n\n  function connectToNewUser(userId, stream) {\n    console.log(3, streamClient);\n    const call = myPeer.call(userId, stream);\n    const video = document.getElementById('friend');\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    setPeer(call);\n  }\n\n  function addVideoStream(video, stream) {\n    video = document.getElementById('me');\n    video.muted = true;\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  return '';\n}\n\n_s(PeerJs, \"p56Totgs8pg4ovXiW/drLUKvarc=\");\n\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["useState","Peer","PeerJs","props","streamClient","peer","setPeer","myPeer","undefined","host","port","myVideo","document","getElementById","navigator","mediaDevices","getUserMedia","video","audio","then","stream","console","log","addVideoStream","socket","addEventListener","event","messageObj","JSON","parse","data","type","connectToNewUser","close","on","call","answer","createElement","userVideoStream","catch","err","userId","remove","muted","srcObject","play"],"mappings":"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","sourcesContent":["import  { useState } from 'react';\nimport Peer from 'peerjs'\n\nexport default function PeerJs(props) {\n\n// eslint-disable-next-line\n let streamClient\n const [peer , setPeer] = useState()\n\n const myPeer = new Peer(undefined ,{\n    host:'/',\n    port:'3002'\n })\n\n\nlet myVideo = document.getElementById('me')\n\nif(navigator.mediaDevices){\n\tnavigator.mediaDevices.getUserMedia({\n\t\tvideo:true,\n\t\taudio:true\n\t}).then(stream =>{\n\t\tconsole.log(0)\n\t\taddVideoStream(myVideo , stream)\n\t\tstreamClient = stream\n\n\n\n props.socket.addEventListener('message' , event =>{\n\tconst messageObj = JSON.parse(event.data)\n\tswitch (messageObj.type) {\n\t\tcase 'user-connected':\n\t\t\tconnectToNewUser(messageObj.data ,streamClient)\n\t\tbreak\n\t\tcase 'user-disconnected':\n\t\t\tif(peer) peer.close()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n})\n\n\nmyPeer.on('call' , call =>{\n\tconsole.log(2 ,streamClient)\n\tcall.answer(streamClient)\n\tconst video = document.createElement('friend')\n\tcall.on('stream' , userVideoStream =>{\n\t\taddVideoStream(video , userVideoStream)\n\t})\n})\n\t}).catch(err=>{\n\t\tconsole.log(\"Error:\" , err)\n\t})\n}\n\n// myPeer.on('open' , id=>{\n// \tconsole.log(1)\n// \tprops.socket.send(JSON.stringify({\n// \t\ttype:'join-room',\n// \t\tdata:[props.roomID , props.ID]\n// \t  }))\n// })\n\n\n\nfunction connectToNewUser(userId ,stream) {\n\tconsole.log(3 , streamClient)\n\tconst call = myPeer.call(userId ,stream)\n\tconst video = document.getElementById('friend')\n\tcall.on('stream' , userVideoStream =>{\n\t\taddVideoStream(video , userVideoStream)\n\t})\n\tcall.on('close' ,()=>{\n\t\tvideo.remove()\n    })\n    setPeer(call)\n}\n\n function addVideoStream(video , stream) {\n\tvideo = document.getElementById('me')\n\tvideo.muted = true\n\n \tvideo.srcObject = stream\n \tvideo.addEventListener('loadedmetadata',() =>{\n \t\tvideo.play();\n \t})\n }\nreturn ('')\n}"]},"metadata":{},"sourceType":"module"}