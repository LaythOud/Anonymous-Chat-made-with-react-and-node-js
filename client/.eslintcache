[{"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/index.js":"1","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/App.js":"2","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Test/reportWebVitals.js":"3","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Home.js":"4","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Provider/SocketProvider.js":"5","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Storage/IDStorage.js":"6","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Storage/SessionStorage.js":"7","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Call.js":"8","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js":"9","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Alert.js":"10","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Provider/PeerProvider.js":"11","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Message.js":"12","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/ErrorBoundary.js":"13","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Info.js":"14"},{"size":813,"mtime":1611919876999,"results":"15","hashOfConfig":"16"},{"size":3426,"mtime":1612001797730,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1609244469782,"results":"18","hashOfConfig":"16"},{"size":2146,"mtime":1611999279926,"results":"19","hashOfConfig":"16"},{"size":546,"mtime":1610635181441,"results":"20","hashOfConfig":"16"},{"size":598,"mtime":1609336609990,"results":"21","hashOfConfig":"16"},{"size":620,"mtime":1609413448119,"results":"22","hashOfConfig":"16"},{"size":907,"mtime":1612001564002,"results":"23","hashOfConfig":"16"},{"size":1924,"mtime":1612001544430,"results":"24","hashOfConfig":"16"},{"size":312,"mtime":1609620969447,"results":"25","hashOfConfig":"16"},{"size":435,"mtime":1611919824699,"results":"26","hashOfConfig":"16"},{"size":3003,"mtime":1612286354500,"results":"27","hashOfConfig":"16"},{"size":950,"mtime":1611999124534,"results":"28","hashOfConfig":"16"},{"size":1371,"mtime":1612285061680,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"lu091l",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/index.js",[],["62","63"],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/App.js",["64"],"import './Style/App.css';\nimport Home from './Component/Home';\nimport React, { useState , useEffect } from 'react';\nimport {useSocket} from './Provider/SocketProvider'\nimport IDStorage from \"./Storage/IDStorage\";\nimport SessionStorage from \"./Storage/SessionStorage\"\nimport Call from './Component/Call'\nimport Info from './Component/Info'\nimport Alert from './Component/Alert'\nimport Message from './Component/Message'\nimport {usePeer} from './Provider/PeerProvider'\n\nexport default function App() {\n \n  const socket = useSocket()\n  const myPeer = usePeer()\n  \n  const [display , setDisplay ] = SessionStorage('display','Home')\n  const [roomID , setRoomID ] = SessionStorage('roomID','')\n  const [peerID , setPeerID ] = SessionStorage('PeerID','')\n  const [chatLog , setChatLog]  = SessionStorage('chatLog' , \"\")\n  const [ID , setID] = IDStorage('ID' ,  'undefined')\n  const [message , setMessage] = useState(\"\")\n\n  useEffect(() => {\n    window.sessionStorage.setItem(\"Anonymous-Chat-chatLog\" , (chatLog))\n  } , [chatLog])\n\n  useEffect(() => {\n    window.sessionStorage.setItem(\"Anonymous-Chat-PeerID\" , (peerID))\n  } , [peerID])\n\n  myPeer.on('open' , id=>{\n\t\tsetPeerID(id)\n\t})\n\n/* ///////////////////////////////////////////////////////////////// */\n\n  socket.addEventListener('message' , event =>{\n    const messageObj = JSON.parse(event.data)\n    switch (messageObj.type) {\n      case 'Add-Success':\n        setID(messageObj.data)\n        break\n      case 'Set-Display':\n        setDisplay(messageObj.data)\n        break\n      case 'Set-RoomID':\n        setRoomID(messageObj.data)\n        break\n      case 'Set-ChatLog':\n        setChatLog(messageObj.data)\n        break\n      case 'Set-PeerID':\n        setPeerID(messageObj.data)\n        break\n      /////////////////////////////////////////////////////////\n      case 'Double-ID-Valid':\n        setMessage(\"You already have ID\")\n        break\n      case 'ID-Not-Valid':\n        setMessage(\"You must have ID befor get in a room\")\n        break\n      case 'Room-NotEmpty-Valid':\n        setMessage(\"Sorry, Room is Full\")\n        break\n      case 'RoomID-Not-Valid':\n        setMessage(\"Sorry, RoomID is Wrong\")\n        break\n      case  'user-disconnected':\n        setMessage(\"Friend Is Out\")\n        break\n      case 'refresh':\n        setTimeout(()=>{window.location.reload()} , 500)\n        return\n    }\n  })\n\n  socket.addEventListener('open' , event =>{\n    socket.send(JSON.stringify({\n        type:'Refresh-Client',\n        data:[\n          localStorage.getItem('Anonymous-Chat-ID') ,\n          window.sessionStorage.getItem('Anonymous-Chat-display'),\n          window.sessionStorage.getItem('Anonymous-Chat-roomID'),\n          window.sessionStorage.getItem('Anonymous-Chat-peerID')\n        ]\n    }))\n  })\n  \n/* ///////////////////////////////////////////////////////////////// */\n  return (\n    <div className=\"App\">\n      { message !== \"\"? <Alert message={message} setMessage={setMessage}/>:'' }\n      { display === \"Message\"?\n          <Message socket={socket} ID={ID} setDisplay={setDisplay} roomID={roomID} chatLog={chatLog} setChatLog={setChatLog}/>:\n          display === \"Call\"?\n           <Call myPeer={myPeer} setDisplay={setDisplay} ID={ID} socket={socket} roomID={roomID} />:\n           display === \"Info\"?\n            <Info socket={socket}/>:\n            <Home socket={socket} peerID={peerID} ID={ID} setDisplay={setDisplay} /> \n     }\n   </div>\n  );\n}\n","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Test/reportWebVitals.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Home.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Provider/SocketProvider.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Storage/IDStorage.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Storage/SessionStorage.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Call.js",["65"],"import React, { useState }  from 'react';\nimport PeerJs from './PeerJs'\n\nexport default function Call(props) {\n\n   const handleX = ()=>{\n        props.socket.send(JSON.stringify({\n            type:'get-out'\n        }))\n     }\n\n\n    return( \n        <div className=\"Call\">\n            <button onClick={handleX} className=\"chat-exit fadeIn first\">X</button>\n            <div className=\"wrapper fadeInDown\">\n                <div id=\"formContent\">\n                    <h3 id=\"peerID\" className=\"active fadeIn first\" >{props.roomID}</h3>\n                    <div className=\"fadeIn second\" id=\"video-grid\">\n                        <video id=\"me\"></video>\n                        <video id=\"friend\"></video>\n                        <PeerJs  myPeer={props.myPeer} roomID={props.roomID} socket={props.socket} ID={props.ID} />\n                   </div>\n                </div>\n            </div>\n        </div>\n    )\n}","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js",["66"],"\nexport default function PeerJs(props) {\n\t\n\tlet myVideo = document.getElementById('me')\n\n\tprops.myPeer.on('call' , call =>{\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\t\t\t\t\n\t\t\t\taddVideoStream(myVideo , stream , 0) \n\t\t\t\tcall.answer(stream)\n\t\t\t\tconst video = document.getElementById('me')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1)\n\t\t\t\t})\n\t\t\t\tcall.on('close' ,()=>{\n\t\t\t\t\tvideo.remove()\n\t\t\t\t})\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t})\n\n\t// props.myPeer.on('disconnected',  ()=> {\n\t// \tif(!props.myPeer.destroyed){\n\t// \t\tconsole.log('Connection lost. Please reconnect');\n\t// \t\tprops.myPeer.reconnect(); \n\t// \t\t// props.socket.send(JSON.stringify({\n\t// \t\t// \ttype:'Refresh-Call',\n\t// \t\t// \tdata:props.roomID\n\t// \t\t// }))\n\t// \t}\n\t// });\n\n\tfunction connectToNewUser(userId) {\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\n\t\t\t\taddVideoStream(myVideo , stream , 0)\n\t\t\t\tconst call = props.myPeer.call(userId ,stream)\n\t\t\t\tconst video = document.getElementById('friend')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1) \n\t\t\t\t})\n\t\t\t\tcall.on('close' ,()=>{\n\t\t\t\t\tvideo.remove()\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction addVideoStream(video , stream , check) {\n\t\tif(!check){\n\t\t\tvideo = document.getElementById('me')\n\t\t\tvideo.muted  = true\n\t\t}\n\t\telse video = document.getElementById('friend')\n\n\t\tvideo.srcObject = stream\n\t\tvideo.addEventListener('loadedmetadata',() =>{\n\t\t\tvideo.play();\n\t\t})\n\t}\n\n\tprops.socket.addEventListener('message' , event =>{\n\t\tconst messageObj = JSON.parse(event.data)\n\t\tswitch (messageObj.type) {\n\t\t\tcase 'user-connected':\n\t\t\t\tconnectToNewUser(messageObj.data)\n\t\t\t\tbreak\n\t\t}\n\t})\n\n\n\treturn ('')\n}","/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Alert.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Provider/PeerProvider.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Message.js",["67","68","69"],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/ErrorBoundary.js",[],"/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/Info.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":41,"column":5,"nodeType":"76","messageId":"77","endLine":76,"endColumn":6},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":77,"column":3,"nodeType":"76","messageId":"77","endLine":81,"endColumn":4},{"ruleId":"74","severity":1,"message":"75","line":32,"column":9,"nodeType":"76","messageId":"77","endLine":36,"endColumn":10},{"ruleId":"82","severity":1,"message":"83","line":40,"column":15,"nodeType":"84","endLine":40,"endColumn":39},{"ruleId":"85","severity":1,"message":"86","line":56,"column":44,"nodeType":"87","messageId":"88","endLine":56,"endColumn":46},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'msg' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]