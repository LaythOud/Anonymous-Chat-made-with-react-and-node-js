{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Peer from 'peerjs';\nexport default function PeerJs(props) {\n  _s();\n\n  // eslint-disable-next-line\n  const [streamClient, setStreamClient] = useState('');\n  const [peer, setPeer] = useState();\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3001'\n  });\n  let myVideo = document.getElementById('me');\n\n  if (navigator.mediaDevices) {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      console.log(0);\n      addVideoStream(myVideo, stream);\n      temp = stream;\n      console.log(1);\n      myPeer.on('call', call => {\n        call.answer(stream);\n        const video = document.createElement('friend');\n        call.on('stream', userVideoStream => {\n          console.log(2);\n          addVideoStream(video, userVideoStream);\n        });\n      });\n      console.log(4);\n    }).catch(err => {\n      console.log(\"Error:\", err);\n    });\n  }\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream);\n    const video = document.getElementById('friend');\n    call.on('stream', userVideoStream => {\n      console.log(3);\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    setPeer(call);\n  }\n\n  function addVideoStream(video, stream) {\n    video = document.getElementById('me');\n    video.muted = true;\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        }).then(stream => {\n          connectToNewUser(messageObj.data, stream);\n        });\n        break;\n\n      case 'user-disconnected':\n        if (peer) peer.close();\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n\n_s(PeerJs, \"i53B3hf6JenKHXg3YSqdZR4PyZ8=\");\n\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["useState","Peer","PeerJs","props","streamClient","setStreamClient","peer","setPeer","myPeer","undefined","host","port","myVideo","document","getElementById","navigator","mediaDevices","getUserMedia","video","audio","then","stream","console","log","addVideoStream","temp","on","call","answer","createElement","userVideoStream","catch","err","connectToNewUser","userId","remove","muted","srcObject","addEventListener","play","socket","event","messageObj","JSON","parse","data","type","close"],"mappings":"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","sourcesContent":["import  { useState } from 'react';\nimport Peer from 'peerjs'\n\nexport default function PeerJs(props) {\n\n// eslint-disable-next-line\n const [streamClient , setStreamClient] = useState('') \n const [peer , setPeer] = useState()\n\n const myPeer = new Peer(undefined ,{\n    host:'/',\n    port:'3001'\n})\n\n\nlet myVideo = document.getElementById('me')\n\nif(navigator.mediaDevices){\n\tnavigator.mediaDevices.getUserMedia({\n\t\tvideo:true,\n\t\taudio:true\n\t}).then(stream =>{\n\t\tconsole.log(0)\n\t\t\taddVideoStream(myVideo , stream)\n\t\t\ttemp = stream\n\n\t\tconsole.log(1)\n\t\tmyPeer.on('call' , call =>{\n\t\t\tcall.answer(stream)\n\t\t\tconst video = document.createElement('friend')\n\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\tconsole.log(2)\n\t\t\t\taddVideoStream(video , userVideoStream)\n\t\t\t})\n\t\t})\n\t\tconsole.log(4)\n\t}).catch(err=>{\n\t\tconsole.log(\"Error:\" , err)\n\t})\n}\n\n\nfunction connectToNewUser(userId ,stream) {\n\tconst call = myPeer.call(userId ,stream)\n\tconst video = document.getElementById('friend')\n\tcall.on('stream' , userVideoStream =>{\n\t\tconsole.log(3)\n\t\taddVideoStream(video , userVideoStream)\n\t})\n\tcall.on('close' ,()=>{\n\t\tvideo.remove()\n    })\n    setPeer(call)\n}\n\n function addVideoStream(video , stream) {\n\tvideo = document.getElementById('me')\n\tvideo.muted = true\n\n \tvideo.srcObject = stream\n \tvideo.addEventListener('loadedmetadata',() =>{\n \t\tvideo.play();\n \t})\n }\n\n\n props.socket.addEventListener('message' , event =>{\n    const messageObj = JSON.parse(event.data)\n    switch (messageObj.type) {\n        case 'user-connected':\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\t\t\t\tconnectToNewUser(messageObj.data ,stream)\n\t\t\t})\n            break\n        case 'user-disconnected':\n            if(peer) peer.close()\n            break\n        default:\n            break\n    }\n})\n\nreturn ('')\n}"]},"metadata":{},"sourceType":"module"}