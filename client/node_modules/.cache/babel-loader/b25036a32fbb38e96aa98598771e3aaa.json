{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessagesExpire = void 0;\n\nconst enums_1 = require(\"../../enums\");\n\nclass MessagesExpire {\n  constructor({\n    realm,\n    config,\n    messageHandler\n  }) {\n    this.timeoutId = null;\n    this.realm = realm;\n    this.config = config;\n    this.messageHandler = messageHandler;\n  }\n\n  startMessagesExpiration() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    } // Clean up outstanding messages\n\n\n    this.timeoutId = setTimeout(() => {\n      this.pruneOutstanding();\n      this.timeoutId = null;\n      this.startMessagesExpiration();\n    }, this.config.cleanup_out_msgs);\n  }\n\n  stopMessagesExpiration() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  pruneOutstanding() {\n    const destinationClientsIds = this.realm.getClientsIdsWithQueue();\n    const now = new Date().getTime();\n    const maxDiff = this.config.expire_timeout;\n    const seen = {};\n\n    for (const destinationClientId of destinationClientsIds) {\n      const messageQueue = this.realm.getMessageQueueById(destinationClientId);\n      if (!messageQueue) continue;\n      const lastReadDiff = now - messageQueue.getLastReadAt();\n      if (lastReadDiff < maxDiff) continue;\n      const messages = messageQueue.getMessages();\n\n      for (const message of messages) {\n        const seenKey = `${message.src}_${message.dst}`;\n\n        if (!seen[seenKey]) {\n          this.messageHandler.handle(undefined, {\n            type: enums_1.MessageType.EXPIRE,\n            src: message.dst,\n            dst: message.src\n          });\n          seen[seenKey] = true;\n        }\n      }\n\n      this.realm.clearMessageQueue(destinationClientId);\n    }\n  }\n\n}\n\nexports.MessagesExpire = MessagesExpire;","map":{"version":3,"sources":["/usr/local/lib/node_modules/peer/dist/src/services/messagesExpire/index.js"],"names":["Object","defineProperty","exports","value","MessagesExpire","enums_1","require","constructor","realm","config","messageHandler","timeoutId","startMessagesExpiration","clearTimeout","setTimeout","pruneOutstanding","cleanup_out_msgs","stopMessagesExpiration","destinationClientsIds","getClientsIdsWithQueue","now","Date","getTime","maxDiff","expire_timeout","seen","destinationClientId","messageQueue","getMessageQueueById","lastReadDiff","getLastReadAt","messages","getMessages","message","seenKey","src","dst","handle","undefined","type","MessageType","EXPIRE","clearMessageQueue"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMF,cAAN,CAAqB;AACjBG,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,GAAD,EAAoC;AAC3C,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;;AACDE,EAAAA,uBAAuB,GAAG;AACtB,QAAI,KAAKD,SAAT,EAAoB;AAChBE,MAAAA,YAAY,CAAC,KAAKF,SAAN,CAAZ;AACH,KAHqB,CAItB;;;AACA,SAAKA,SAAL,GAAiBG,UAAU,CAAC,MAAM;AAC9B,WAAKC,gBAAL;AACA,WAAKJ,SAAL,GAAiB,IAAjB;AACA,WAAKC,uBAAL;AACH,KAJ0B,EAIxB,KAAKH,MAAL,CAAYO,gBAJY,CAA3B;AAKH;;AACDC,EAAAA,sBAAsB,GAAG;AACrB,QAAI,KAAKN,SAAT,EAAoB;AAChBE,MAAAA,YAAY,CAAC,KAAKF,SAAN,CAAZ;AACA,WAAKA,SAAL,GAAiB,IAAjB;AACH;AACJ;;AACDI,EAAAA,gBAAgB,GAAG;AACf,UAAMG,qBAAqB,GAAG,KAAKV,KAAL,CAAWW,sBAAX,EAA9B;AACA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAMC,OAAO,GAAG,KAAKd,MAAL,CAAYe,cAA5B;AACA,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,MAAMC,mBAAX,IAAkCR,qBAAlC,EAAyD;AACrD,YAAMS,YAAY,GAAG,KAAKnB,KAAL,CAAWoB,mBAAX,CAA+BF,mBAA/B,CAArB;AACA,UAAI,CAACC,YAAL,EACI;AACJ,YAAME,YAAY,GAAGT,GAAG,GAAGO,YAAY,CAACG,aAAb,EAA3B;AACA,UAAID,YAAY,GAAGN,OAAnB,EACI;AACJ,YAAMQ,QAAQ,GAAGJ,YAAY,CAACK,WAAb,EAAjB;;AACA,WAAK,MAAMC,OAAX,IAAsBF,QAAtB,EAAgC;AAC5B,cAAMG,OAAO,GAAI,GAAED,OAAO,CAACE,GAAI,IAAGF,OAAO,CAACG,GAAI,EAA9C;;AACA,YAAI,CAACX,IAAI,CAACS,OAAD,CAAT,EAAoB;AAChB,eAAKxB,cAAL,CAAoB2B,MAApB,CAA2BC,SAA3B,EAAsC;AAClCC,YAAAA,IAAI,EAAElC,OAAO,CAACmC,WAAR,CAAoBC,MADQ;AAElCN,YAAAA,GAAG,EAAEF,OAAO,CAACG,GAFqB;AAGlCA,YAAAA,GAAG,EAAEH,OAAO,CAACE;AAHqB,WAAtC;AAKAV,UAAAA,IAAI,CAACS,OAAD,CAAJ,GAAgB,IAAhB;AACH;AACJ;;AACD,WAAK1B,KAAL,CAAWkC,iBAAX,CAA6BhB,mBAA7B;AACH;AACJ;;AAlDgB;;AAoDrBxB,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessagesExpire = void 0;\nconst enums_1 = require(\"../../enums\");\nclass MessagesExpire {\n    constructor({ realm, config, messageHandler }) {\n        this.timeoutId = null;\n        this.realm = realm;\n        this.config = config;\n        this.messageHandler = messageHandler;\n    }\n    startMessagesExpiration() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n        // Clean up outstanding messages\n        this.timeoutId = setTimeout(() => {\n            this.pruneOutstanding();\n            this.timeoutId = null;\n            this.startMessagesExpiration();\n        }, this.config.cleanup_out_msgs);\n    }\n    stopMessagesExpiration() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n    pruneOutstanding() {\n        const destinationClientsIds = this.realm.getClientsIdsWithQueue();\n        const now = new Date().getTime();\n        const maxDiff = this.config.expire_timeout;\n        const seen = {};\n        for (const destinationClientId of destinationClientsIds) {\n            const messageQueue = this.realm.getMessageQueueById(destinationClientId);\n            if (!messageQueue)\n                continue;\n            const lastReadDiff = now - messageQueue.getLastReadAt();\n            if (lastReadDiff < maxDiff)\n                continue;\n            const messages = messageQueue.getMessages();\n            for (const message of messages) {\n                const seenKey = `${message.src}_${message.dst}`;\n                if (!seen[seenKey]) {\n                    this.messageHandler.handle(undefined, {\n                        type: enums_1.MessageType.EXPIRE,\n                        src: message.dst,\n                        dst: message.src\n                    });\n                    seen[seenKey] = true;\n                }\n            }\n            this.realm.clearMessageQueue(destinationClientId);\n        }\n    }\n}\nexports.MessagesExpire = MessagesExpire;\n"]},"metadata":{},"sourceType":"script"}