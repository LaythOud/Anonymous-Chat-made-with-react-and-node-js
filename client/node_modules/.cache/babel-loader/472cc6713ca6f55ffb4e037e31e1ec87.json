{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckBrokenConnections = void 0;\nconst DEFAULT_CHECK_INTERVAL = 300;\n\nclass CheckBrokenConnections {\n  constructor({\n    realm,\n    config,\n    checkInterval = DEFAULT_CHECK_INTERVAL,\n    onClose\n  }) {\n    this.timeoutId = null;\n    this.realm = realm;\n    this.config = config;\n    this.onClose = onClose;\n    this.checkInterval = checkInterval;\n  }\n\n  start() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n\n    this.timeoutId = setTimeout(() => {\n      this.checkConnections();\n      this.timeoutId = null;\n      this.start();\n    }, this.checkInterval);\n  }\n\n  stop() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  checkConnections() {\n    var _a, _b;\n\n    const clientsIds = this.realm.getClientsIds();\n    const now = new Date().getTime();\n    const {\n      alive_timeout: aliveTimeout\n    } = this.config;\n\n    for (const clientId of clientsIds) {\n      const client = this.realm.getClientById(clientId);\n      if (!client) continue;\n      const timeSinceLastPing = now - client.getLastPing();\n      if (timeSinceLastPing < aliveTimeout) continue;\n\n      try {\n        (_a = client.getSocket()) === null || _a === void 0 ? void 0 : _a.close();\n      } finally {\n        this.realm.clearMessageQueue(clientId);\n        this.realm.removeClientById(clientId);\n        client.setSocket(null);\n        (_b = this.onClose) === null || _b === void 0 ? void 0 : _b.call(this, client);\n      }\n    }\n  }\n\n}\n\nexports.CheckBrokenConnections = CheckBrokenConnections;","map":{"version":3,"sources":["/usr/local/lib/node_modules/peer/dist/src/services/checkBrokenConnections/index.js"],"names":["Object","defineProperty","exports","value","CheckBrokenConnections","DEFAULT_CHECK_INTERVAL","constructor","realm","config","checkInterval","onClose","timeoutId","start","clearTimeout","setTimeout","checkConnections","stop","_a","_b","clientsIds","getClientsIds","now","Date","getTime","alive_timeout","aliveTimeout","clientId","client","getClientById","timeSinceLastPing","getLastPing","getSocket","close","clearMessageQueue","removeClientById","setSocket","call"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;AACA,MAAMC,sBAAsB,GAAG,GAA/B;;AACA,MAAMD,sBAAN,CAA6B;AACzBE,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,aAAa,GAAGJ,sBAAjC;AAAyDK,IAAAA;AAAzD,GAAD,EAAqE;AAC5E,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACH;;AACDG,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKD,SAAT,EAAoB;AAChBE,MAAAA,YAAY,CAAC,KAAKF,SAAN,CAAZ;AACH;;AACD,SAAKA,SAAL,GAAiBG,UAAU,CAAC,MAAM;AAC9B,WAAKC,gBAAL;AACA,WAAKJ,SAAL,GAAiB,IAAjB;AACA,WAAKC,KAAL;AACH,KAJ0B,EAIxB,KAAKH,aAJmB,CAA3B;AAKH;;AACDO,EAAAA,IAAI,GAAG;AACH,QAAI,KAAKL,SAAT,EAAoB;AAChBE,MAAAA,YAAY,CAAC,KAAKF,SAAN,CAAZ;AACA,WAAKA,SAAL,GAAiB,IAAjB;AACH;AACJ;;AACDI,EAAAA,gBAAgB,GAAG;AACf,QAAIE,EAAJ,EAAQC,EAAR;;AACA,UAAMC,UAAU,GAAG,KAAKZ,KAAL,CAAWa,aAAX,EAAnB;AACA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAM;AAAEC,MAAAA,aAAa,EAAEC;AAAjB,QAAkC,KAAKjB,MAA7C;;AACA,SAAK,MAAMkB,QAAX,IAAuBP,UAAvB,EAAmC;AAC/B,YAAMQ,MAAM,GAAG,KAAKpB,KAAL,CAAWqB,aAAX,CAAyBF,QAAzB,CAAf;AACA,UAAI,CAACC,MAAL,EACI;AACJ,YAAME,iBAAiB,GAAGR,GAAG,GAAGM,MAAM,CAACG,WAAP,EAAhC;AACA,UAAID,iBAAiB,GAAGJ,YAAxB,EACI;;AACJ,UAAI;AACA,SAACR,EAAE,GAAGU,MAAM,CAACI,SAAP,EAAN,MAA8B,IAA9B,IAAsCd,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACe,KAAH,EAA/D;AACH,OAFD,SAGQ;AACJ,aAAKzB,KAAL,CAAW0B,iBAAX,CAA6BP,QAA7B;AACA,aAAKnB,KAAL,CAAW2B,gBAAX,CAA4BR,QAA5B;AACAC,QAAAA,MAAM,CAACQ,SAAP,CAAiB,IAAjB;AACA,SAACjB,EAAE,GAAG,KAAKR,OAAX,MAAwB,IAAxB,IAAgCQ,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACkB,IAAH,CAAQ,IAAR,EAAcT,MAAd,CAAzD;AACH;AACJ;AACJ;;AA9CwB;;AAgD7BzB,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CheckBrokenConnections = void 0;\nconst DEFAULT_CHECK_INTERVAL = 300;\nclass CheckBrokenConnections {\n    constructor({ realm, config, checkInterval = DEFAULT_CHECK_INTERVAL, onClose }) {\n        this.timeoutId = null;\n        this.realm = realm;\n        this.config = config;\n        this.onClose = onClose;\n        this.checkInterval = checkInterval;\n    }\n    start() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n        this.timeoutId = setTimeout(() => {\n            this.checkConnections();\n            this.timeoutId = null;\n            this.start();\n        }, this.checkInterval);\n    }\n    stop() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n    checkConnections() {\n        var _a, _b;\n        const clientsIds = this.realm.getClientsIds();\n        const now = new Date().getTime();\n        const { alive_timeout: aliveTimeout } = this.config;\n        for (const clientId of clientsIds) {\n            const client = this.realm.getClientById(clientId);\n            if (!client)\n                continue;\n            const timeSinceLastPing = now - client.getLastPing();\n            if (timeSinceLastPing < aliveTimeout)\n                continue;\n            try {\n                (_a = client.getSocket()) === null || _a === void 0 ? void 0 : _a.close();\n            }\n            finally {\n                this.realm.clearMessageQueue(clientId);\n                this.realm.removeClientById(clientId);\n                client.setSocket(null);\n                (_b = this.onClose) === null || _b === void 0 ? void 0 : _b.call(this, client);\n            }\n        }\n    }\n}\nexports.CheckBrokenConnections = CheckBrokenConnections;\n"]},"metadata":{},"sourceType":"script"}