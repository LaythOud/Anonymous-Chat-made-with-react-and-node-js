{"ast":null,"code":"export default function PeerJs(props) {\n  let myVideo = document.getElementById('me');\n  props.myPeer.on('open', id => {\n    document.getElementById(\"peerID\").textContent = id;\n  }).then(() => {\n    props.socket.send(JSON.stringify({\n      type: 'Init-Room',\n      data: [props.ID, document.getElementById(\"peerID\").textContent]\n    }));\n  });\n  props.myPeer.on('call', call => {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream, 0);\n        call.answer(stream);\n        const video = document.getElementById('me');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  });\n\n  function connectToNewUser(userId) {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream, 0);\n        const call = props.myPeer.call(userId, stream);\n        const video = document.getElementById('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n        call.on('close', () => {\n          video.remove();\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  }\n\n  function addVideoStream(video, stream, check) {\n    if (!check) {\n      video = document.getElementById('me');\n      video.muted = true;\n    } else video = document.getElementById('friend');\n\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data);\n        break;\n\n      case 'user-disconnected':\n        if (props.peer) props.peer.close();\n        break;\n\n      case 'Init':\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["PeerJs","props","myVideo","document","getElementById","myPeer","on","id","textContent","then","socket","send","JSON","stringify","type","data","ID","call","navigator","mediaDevices","getUserMedia","video","audio","stream","addVideoStream","answer","userVideoStream","catch","err","console","log","connectToNewUser","userId","remove","check","muted","srcObject","addEventListener","play","event","messageObj","parse","peer","close"],"mappings":"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","sourcesContent":["\nexport default function PeerJs(props) {\n\t\n\tlet myVideo = document.getElementById('me')\n\n\tprops.myPeer.on('open' , id=>{\n\t\tdocument.getElementById(\"peerID\").textContent = id\n\t}).then(()=>{\n\t\tprops.socket.send(JSON.stringify({type:'Init-Room' , data:[props.ID , document.getElementById(\"peerID\").textContent]}))\n\t})\n\n\tprops.myPeer.on('call' , call =>{\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\t\t\t\n\t\t\t\taddVideoStream(myVideo , stream , 0) \n\t\t\t\tcall.answer(stream)\n\t\t\t\tconst video = document.getElementById('me')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1)\n\t\t\t\t})\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t})\n\n\tfunction connectToNewUser(userId) {\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\n\t\t\t\taddVideoStream(myVideo , stream , 0)\n\t\t\t\tconst call = props.myPeer.call(userId ,stream)\n\t\t\t\tconst video = document.getElementById('friend')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1) \n\t\t\t\t})\n\t\t\t\tcall.on('close' ,()=>{\n\t\t\t\t\tvideo.remove()\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction addVideoStream(video , stream , check) {\n\t\tif(!check){\n\t\t\tvideo = document.getElementById('me')\n\t\t\tvideo.muted  = true\n\t\t}\n\t\telse video = document.getElementById('friend')\n\n\t\tvideo.srcObject = stream\n\t\tvideo.addEventListener('loadedmetadata',() =>{\n\t\t\tvideo.play();\n\t\t})\n\t}\n\n\tprops.socket.addEventListener('message' , event =>{\n\t\tconst messageObj = JSON.parse(event.data)\n\t\tswitch (messageObj.type) {\n\t\t\tcase 'user-connected':\n\t\t\t\tconnectToNewUser(messageObj.data)\n\t\t\tbreak\n\t\t\tcase 'user-disconnected':\n\t\t\t\tif(props.peer) props.peer.close()\n\t\t\t\tbreak\n\t\t\tcase 'Init':\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t})\n\n\treturn ('')\n}"]},"metadata":{},"sourceType":"module"}