{"ast":null,"code":"export default function PeerJs(props) {\n  let myVideo = document.getElementById('me');\n  props.myPeer.on('open', id => {\n    document.getElementById(\"peerID\").textContent = props.roomID + \",\" + id;\n  });\n  props.myPeer.on('call', call => {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        if (call && call.open) {\n          addVideoStream(myVideo, stream, 0);\n          call.answer(stream);\n          const video = document.getElementById('me');\n          call.on('stream', userVideoStream => {\n            addVideoStream(video, userVideoStream, 1);\n          });\n        } else {\n          props.socket.send(JSON.stringify({\n            type: 'handel-alert',\n            data: 'Room-NotEmpty-Valid'\n          }));\n        }\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  });\n  props.myPeer.on('disconnected', function () {\n    console.log('Connection lost. Please reconnect');\n    props.myPeer.reconnect();\n  });\n\n  function connectToNewUser(userId) {\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream, 0);\n        const call = props.myPeer.call(userId, stream);\n        const video = document.getElementById('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream, 1);\n        });\n        call.on('close', () => {\n          video.remove();\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  }\n\n  function addVideoStream(video, stream, check) {\n    if (!check) {\n      video = document.getElementById('me');\n      video.muted = true;\n    } else video = document.getElementById('friend');\n\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data);\n        break;\n\n      case 'user-disconnected':\n        if (props.peer) props.peer.close();\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["PeerJs","props","myVideo","document","getElementById","myPeer","on","id","textContent","roomID","call","navigator","mediaDevices","getUserMedia","video","audio","then","stream","open","addVideoStream","answer","userVideoStream","socket","send","JSON","stringify","type","data","catch","err","console","log","reconnect","connectToNewUser","userId","remove","check","muted","srcObject","addEventListener","play","event","messageObj","parse","peer","close"],"mappings":"AACA,eAAe,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAErC,MAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CAAd;AAEAH,EAAAA,KAAK,CAACI,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAyBC,EAAE,IAAE;AAC5BJ,IAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCI,WAAlC,GAAgDP,KAAK,CAACQ,MAAN,GAAe,GAAf,GAAqBF,EAArE;AACA,GAFD;AAIAN,EAAAA,KAAK,CAACI,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAyBI,IAAI,IAAG;AAC/B,QAAGC,SAAS,CAACC,YAAb,EAA0B;AACzBD,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACnCC,QAAAA,KAAK,EAAC,IAD6B;AAEnCC,QAAAA,KAAK,EAAC;AAF6B,OAApC,EAGGC,IAHH,CAGQC,MAAM,IAAG;AAChB,YAAGP,IAAI,IAAIA,IAAI,CAACQ,IAAhB,EAAqB;AACpBC,UAAAA,cAAc,CAACjB,OAAD,EAAWe,MAAX,EAAoB,CAApB,CAAd;AACAP,UAAAA,IAAI,CAACU,MAAL,CAAYH,MAAZ;AACA,gBAAMH,KAAK,GAAGX,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CAAd;AACAM,UAAAA,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAmBe,eAAe,IAAG;AACpCF,YAAAA,cAAc,CAACL,KAAD,EAASO,eAAT,EAA2B,CAA3B,CAAd;AACA,WAFD;AAGA,SAPD,MAOK;AACJpB,UAAAA,KAAK,CAACqB,MAAN,CAAaC,IAAb,CAAkBC,IAAI,CAACC,SAAL,CAAe;AAChCC,YAAAA,IAAI,EAAC,cAD2B;AAEhCC,YAAAA,IAAI,EAAC;AAF2B,WAAf,CAAlB;AAIA;AACD,OAjBD,EAiBGC,KAjBH,CAiBSC,GAAG,IAAE;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,GAAvB;AACA,OAnBD;AAoBA;AACD,GAvBD;AAyBA5B,EAAAA,KAAK,CAACI,MAAN,CAAaC,EAAb,CAAgB,cAAhB,EAAgC,YAAY;AAC3CwB,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA9B,IAAAA,KAAK,CAACI,MAAN,CAAa2B,SAAb;AACA,GAHD;;AAKA,WAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AACjC,QAAGvB,SAAS,CAACC,YAAb,EAA0B;AACzBD,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACnCC,QAAAA,KAAK,EAAC,IAD6B;AAEnCC,QAAAA,KAAK,EAAC;AAF6B,OAApC,EAGGC,IAHH,CAGQC,MAAM,IAAG;AAEhBE,QAAAA,cAAc,CAACjB,OAAD,EAAWe,MAAX,EAAoB,CAApB,CAAd;AACA,cAAMP,IAAI,GAAGT,KAAK,CAACI,MAAN,CAAaK,IAAb,CAAkBwB,MAAlB,EAA0BjB,MAA1B,CAAb;AACA,cAAMH,KAAK,GAAGX,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAd;AACAM,QAAAA,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAmBe,eAAe,IAAG;AACpCF,UAAAA,cAAc,CAACL,KAAD,EAASO,eAAT,EAA2B,CAA3B,CAAd;AACA,SAFD;AAGAX,QAAAA,IAAI,CAACJ,EAAL,CAAQ,OAAR,EAAiB,MAAI;AACpBQ,UAAAA,KAAK,CAACqB,MAAN;AACA,SAFD;AAIA,OAfD,EAeGP,KAfH,CAeSC,GAAG,IAAE;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,GAAvB;AACA,OAjBD;AAkBA;AACD;;AAED,WAASV,cAAT,CAAwBL,KAAxB,EAAgCG,MAAhC,EAAyCmB,KAAzC,EAAgD;AAC/C,QAAG,CAACA,KAAJ,EAAU;AACTtB,MAAAA,KAAK,GAAGX,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CAAR;AACAU,MAAAA,KAAK,CAACuB,KAAN,GAAe,IAAf;AACA,KAHD,MAIKvB,KAAK,GAAGX,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAR;;AAELU,IAAAA,KAAK,CAACwB,SAAN,GAAkBrB,MAAlB;AACAH,IAAAA,KAAK,CAACyB,gBAAN,CAAuB,gBAAvB,EAAwC,MAAK;AAC5CzB,MAAAA,KAAK,CAAC0B,IAAN;AACA,KAFD;AAGA;;AAEDvC,EAAAA,KAAK,CAACqB,MAAN,CAAaiB,gBAAb,CAA8B,SAA9B,EAA0CE,KAAK,IAAG;AACjD,UAAMC,UAAU,GAAGlB,IAAI,CAACmB,KAAL,CAAWF,KAAK,CAACd,IAAjB,CAAnB;;AACA,YAAQe,UAAU,CAAChB,IAAnB;AACC,WAAK,gBAAL;AACCO,QAAAA,gBAAgB,CAACS,UAAU,CAACf,IAAZ,CAAhB;AACA;;AACD,WAAK,mBAAL;AACC,YAAG1B,KAAK,CAAC2C,IAAT,EAAe3C,KAAK,CAAC2C,IAAN,CAAWC,KAAX;AACf;;AACD;AACC;AARF;AAUA,GAZD;AAeA,SAAQ,EAAR;AACA;KA1FuB7C,M","sourcesContent":["\nexport default function PeerJs(props) {\n\t\n\tlet myVideo = document.getElementById('me')\n\n\tprops.myPeer.on('open' , id=>{\n\t\tdocument.getElementById(\"peerID\").textContent = props.roomID + \",\" + id\n\t})\n\n\tprops.myPeer.on('call' , call =>{\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\t\t\t\tif(call && call.open){\n\t\t\t\t\taddVideoStream(myVideo , stream , 0) \n\t\t\t\t\tcall.answer(stream)\n\t\t\t\t\tconst video = document.getElementById('me')\n\t\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\t\taddVideoStream(video , userVideoStream , 1)\n\t\t\t\t\t})\n\t\t\t\t}else{\n\t\t\t\t\tprops.socket.send(JSON.stringify({\n\t\t\t\t\t\ttype:'handel-alert',\n\t\t\t\t\t\tdata:'Room-NotEmpty-Valid'\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t})\n\n\tprops.myPeer.on('disconnected', function () {\n\t\tconsole.log('Connection lost. Please reconnect');\n\t\tprops.myPeer.reconnect();\n\t});\n\n\tfunction connectToNewUser(userId) {\n\t\tif(navigator.mediaDevices){\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo:true,\n\t\t\t\taudio:true\n\t\t\t}).then(stream =>{\n\n\t\t\t\taddVideoStream(myVideo , stream , 0)\n\t\t\t\tconst call = props.myPeer.call(userId ,stream)\n\t\t\t\tconst video = document.getElementById('friend')\n\t\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\t\taddVideoStream(video , userVideoStream , 1) \n\t\t\t\t})\n\t\t\t\tcall.on('close' ,()=>{\n\t\t\t\t\tvideo.remove()\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}).catch(err=>{\n\t\t\t\tconsole.log(\"Error:\" , err)\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction addVideoStream(video , stream , check) {\n\t\tif(!check){\n\t\t\tvideo = document.getElementById('me')\n\t\t\tvideo.muted  = true\n\t\t}\n\t\telse video = document.getElementById('friend')\n\n\t\tvideo.srcObject = stream\n\t\tvideo.addEventListener('loadedmetadata',() =>{\n\t\t\tvideo.play();\n\t\t})\n\t}\n\n\tprops.socket.addEventListener('message' , event =>{\n\t\tconst messageObj = JSON.parse(event.data)\n\t\tswitch (messageObj.type) {\n\t\t\tcase 'user-connected':\n\t\t\t\tconnectToNewUser(messageObj.data)\n\t\t\t\tbreak\n\t\t\tcase 'user-disconnected':\n\t\t\t\tif(props.peer) props.peer.close()\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t})\n\n\n\treturn ('')\n}"]},"metadata":{},"sourceType":"module"}