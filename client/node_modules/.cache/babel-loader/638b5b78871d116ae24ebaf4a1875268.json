{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Peer from 'peerjs';\nexport default function PeerJs(props) {\n  _s();\n\n  // eslint-disable-next-line\n  const [peerID, setPeerID] = useState();\n  const [peer, setPeer] = useState();\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3002'\n  });\n  let myVideo = document.getElementById('me');\n  myPeer.on('call', call => {\n    console.log(0);\n\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream);\n        call.answer(stream);\n        const video = document.createElement('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  });\n\n  function connectToNewUser(userId) {\n    console.log(3);\n\n    if (navigator.mediaDevices) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        addVideoStream(myVideo, stream);\n        const call = myPeer.call(userId, stream);\n        const video = document.getElementById('friend');\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n        call.on('close', () => {\n          video.remove();\n        });\n        setPeer(call);\n      }).catch(err => {\n        console.log(\"Error:\", err);\n      });\n    }\n  }\n\n  function addVideoStream(video, stream) {\n    video = document.getElementById('me');\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data);\n        break;\n\n      case 'user-disconnected':\n        if (peer) peer.close();\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n\n_s(PeerJs, \"mdrE3w8THeHgEBFeGponIAHnvlo=\");\n\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["useState","Peer","PeerJs","props","peerID","setPeerID","peer","setPeer","myPeer","undefined","host","port","myVideo","document","getElementById","on","call","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","stream","addVideoStream","answer","createElement","userVideoStream","catch","err","connectToNewUser","userId","remove","srcObject","addEventListener","play","socket","event","messageObj","JSON","parse","data","type","close"],"mappings":"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","sourcesContent":["import  { useState } from 'react';\nimport Peer from 'peerjs'\n\nexport default function PeerJs(props) {\n\n// eslint-disable-next-line\n const [peerID , setPeerID] = useState()\n const [peer , setPeer] = useState()\n\n const myPeer = new Peer(undefined ,{\n    host:'/',\n    port:'3002'\n })\n\n\nlet myVideo = document.getElementById('me')\n\nmyPeer.on('call' , call =>{\n\tconsole.log(0)\n\tif(navigator.mediaDevices){\n\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\tvideo:true,\n\t\t\taudio:true\n\t\t}).then(stream =>{\n\t\t\n\t\t\taddVideoStream(myVideo , stream)\n\t\t\tcall.answer(stream)\n\t\t\tconst video = document.createElement('friend')\n\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\taddVideoStream(video , userVideoStream)\n\t\t\t})\n\t\t}).catch(err=>{\n\t\t\tconsole.log(\"Error:\" , err)\n\t\t})\n\t}\n})\n\nfunction connectToNewUser(userId) {\n\tconsole.log(3)\n\tif(navigator.mediaDevices){\n\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\tvideo:true,\n\t\t\taudio:true\n\t\t}).then(stream =>{\n\n\t\t\taddVideoStream(myVideo , stream)\n\t\t\tconst call = myPeer.call(userId ,stream)\n\t\t\tconst video = document.getElementById('friend')\n\t\t\tcall.on('stream' , userVideoStream =>{\n\t\t\t\taddVideoStream(video , userVideoStream)\n\t\t\t})\n\t\t\tcall.on('close' ,()=>{\n\t\t\t\tvideo.remove()\n\t\t\t})\n\t\t\tsetPeer(call)\n\n\t\t}).catch(err=>{\n\t\t\tconsole.log(\"Error:\" , err)\n\t\t})\n\t}\n}\n\n function addVideoStream(video , stream) {\n\tvideo = document.getElementById('me')\n\t\n \tvideo.srcObject = stream\n \tvideo.addEventListener('loadedmetadata',() =>{\n \t\tvideo.play();\n \t})\n }\n\n\n\n\n props.socket.addEventListener('message' , event =>{\n\tconst messageObj = JSON.parse(event.data)\n\tswitch (messageObj.type) {\n\t\tcase 'user-connected':\n\t\t\tconnectToNewUser(messageObj.data)\n\t\tbreak\n\t\tcase 'user-disconnected':\n\t\t\tif(peer) peer.close()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n})\n\n\nreturn ('')\n}"]},"metadata":{},"sourceType":"module"}