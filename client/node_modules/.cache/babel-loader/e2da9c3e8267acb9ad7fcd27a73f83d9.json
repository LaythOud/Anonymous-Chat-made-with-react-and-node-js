{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInstance = void 0;\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst realm_1 = require(\"./models/realm\");\n\nconst checkBrokenConnections_1 = require(\"./services/checkBrokenConnections\");\n\nconst messagesExpire_1 = require(\"./services/messagesExpire\");\n\nconst webSocketServer_1 = require(\"./services/webSocketServer\");\n\nconst messageHandler_1 = require(\"./messageHandler\");\n\nconst api_1 = require(\"./api\");\n\nconst createInstance = ({\n  app,\n  server,\n  options\n}) => {\n  const config = options;\n  const realm = new realm_1.Realm();\n  const messageHandler = new messageHandler_1.MessageHandler(realm);\n  const api = api_1.Api({\n    config,\n    realm,\n    messageHandler\n  });\n  const messagesExpire = new messagesExpire_1.MessagesExpire({\n    realm,\n    config,\n    messageHandler\n  });\n  const checkBrokenConnections = new checkBrokenConnections_1.CheckBrokenConnections({\n    realm,\n    config,\n    onClose: client => {\n      app.emit(\"disconnect\", client);\n    }\n  });\n  app.use(options.path, api); //use mountpath for WS server\n\n  const customConfig = Object.assign(Object.assign({}, config), {\n    path: path_1.default.posix.join(app.path(), options.path, '/')\n  });\n  const wss = new webSocketServer_1.WebSocketServer({\n    server,\n    realm,\n    config: customConfig\n  });\n  wss.on(\"connection\", client => {\n    const messageQueue = realm.getMessageQueueById(client.getId());\n\n    if (messageQueue) {\n      let message;\n\n      while (message = messageQueue.readMessage()) {\n        messageHandler.handle(client, message);\n      }\n\n      realm.clearMessageQueue(client.getId());\n    }\n\n    app.emit(\"connection\", client);\n  });\n  wss.on(\"message\", (client, message) => {\n    app.emit(\"message\", client, message);\n    messageHandler.handle(client, message);\n  });\n  wss.on(\"close\", client => {\n    app.emit(\"disconnect\", client);\n  });\n  wss.on(\"error\", error => {\n    app.emit(\"error\", error);\n  });\n  messagesExpire.startMessagesExpiration();\n  checkBrokenConnections.start();\n};\n\nexports.createInstance = createInstance;","map":{"version":3,"sources":["/usr/local/lib/node_modules/peer/dist/src/instance.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","createInstance","path_1","require","realm_1","checkBrokenConnections_1","messagesExpire_1","webSocketServer_1","messageHandler_1","api_1","app","server","options","config","realm","Realm","messageHandler","MessageHandler","api","Api","messagesExpire","MessagesExpire","checkBrokenConnections","CheckBrokenConnections","onClose","client","emit","use","path","customConfig","assign","default","posix","join","wss","WebSocketServer","on","messageQueue","getMessageQueueById","getId","message","readMessage","handle","clearMessageQueue","error","startMessagesExpiration","start"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createInstance = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst realm_1 = require(\"./models/realm\");\nconst checkBrokenConnections_1 = require(\"./services/checkBrokenConnections\");\nconst messagesExpire_1 = require(\"./services/messagesExpire\");\nconst webSocketServer_1 = require(\"./services/webSocketServer\");\nconst messageHandler_1 = require(\"./messageHandler\");\nconst api_1 = require(\"./api\");\nconst createInstance = ({ app, server, options }) => {\n    const config = options;\n    const realm = new realm_1.Realm();\n    const messageHandler = new messageHandler_1.MessageHandler(realm);\n    const api = api_1.Api({ config, realm, messageHandler });\n    const messagesExpire = new messagesExpire_1.MessagesExpire({ realm, config, messageHandler });\n    const checkBrokenConnections = new checkBrokenConnections_1.CheckBrokenConnections({\n        realm,\n        config,\n        onClose: client => {\n            app.emit(\"disconnect\", client);\n        }\n    });\n    app.use(options.path, api);\n    //use mountpath for WS server\n    const customConfig = Object.assign(Object.assign({}, config), { path: path_1.default.posix.join(app.path(), options.path, '/') });\n    const wss = new webSocketServer_1.WebSocketServer({\n        server,\n        realm,\n        config: customConfig\n    });\n    wss.on(\"connection\", (client) => {\n        const messageQueue = realm.getMessageQueueById(client.getId());\n        if (messageQueue) {\n            let message;\n            while ((message = messageQueue.readMessage())) {\n                messageHandler.handle(client, message);\n            }\n            realm.clearMessageQueue(client.getId());\n        }\n        app.emit(\"connection\", client);\n    });\n    wss.on(\"message\", (client, message) => {\n        app.emit(\"message\", client, message);\n        messageHandler.handle(client, message);\n    });\n    wss.on(\"close\", (client) => {\n        app.emit(\"disconnect\", client);\n    });\n    wss.on(\"error\", (error) => {\n        app.emit(\"error\", error);\n    });\n    messagesExpire.startMessagesExpiration();\n    checkBrokenConnections.start();\n};\nexports.createInstance = createInstance;\n"]},"metadata":{},"sourceType":"script"}