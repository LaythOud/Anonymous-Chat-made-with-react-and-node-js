{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Peer from 'peerjs';\nexport default function PeerJs(props) {\n  _s();\n\n  // eslint-disable-next-line\n  let streamClient;\n  const [peer, setPeer] = useState();\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3001'\n  });\n  let myVideo = document.getElementById('me');\n\n  if (navigator.mediaDevices) {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      console.log(0);\n      addVideoStream(myVideo, stream);\n      streamClient = stream;\n    }).catch(err => {\n      console.log(\"Error:\", err);\n    });\n  }\n\n  myPeer.on('open', id => {\n    console.log(1);\n    props.socket.send(JSON.stringify({\n      type: 'join-room',\n      data: [props.roomID, props.ID]\n    }));\n  }); // myPeer.on('call' , call =>{\n  // \tconsole.log(2)\n  // \tcall.answer(streamClient)\n  // \tconst video = document.createElement('friend')\n  // \tcall.on('stream' , userVideoStream =>{\n  // \t\taddVideoStream(video , userVideoStream)\n  // \t})\n  // })\n\n  function connectToNewUser(userId, stream) {\n    console.log(3);\n    const call = myPeer.call(userId, stream);\n    const video = document.getElementById('friend');\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    setPeer(call);\n  }\n\n  function addVideoStream(video, stream) {\n    video = document.getElementById('me');\n    video.muted = true;\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n  }\n\n  props.socket.addEventListener('message', event => {\n    const messageObj = JSON.parse(event.data);\n\n    switch (messageObj.type) {\n      case 'user-connected':\n        connectToNewUser(messageObj.data, streamClient);\n        break;\n\n      case 'user-disconnected':\n        if (peer) peer.close();\n        break;\n\n      default:\n        break;\n    }\n  });\n  return '';\n}\n\n_s(PeerJs, \"p56Totgs8pg4ovXiW/drLUKvarc=\");\n\n_c = PeerJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeerJs\");","map":{"version":3,"sources":["/media/lizard/02d10dea-b08f-45b8-a5ad-a36d5f9f2e04/lizard/WEB/PROJECT/Anonymous-Chat/client/src/Component/PeerJs.js"],"names":["useState","Peer","PeerJs","props","streamClient","peer","setPeer","myPeer","undefined","host","port","myVideo","document","getElementById","navigator","mediaDevices","getUserMedia","video","audio","then","stream","console","log","addVideoStream","catch","err","on","id","socket","send","JSON","stringify","type","data","roomID","ID","connectToNewUser","userId","call","userVideoStream","remove","muted","srcObject","addEventListener","play","event","messageObj","parse","close"],"mappings":"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","sourcesContent":["import  { useState } from 'react';\nimport Peer from 'peerjs'\n\nexport default function PeerJs(props) {\n\n// eslint-disable-next-line\n let streamClient\n const [peer , setPeer] = useState()\n\n const myPeer = new Peer(undefined ,{\n    host:'/',\n    port:'3001'\n})\n\n\nlet myVideo = document.getElementById('me')\n\nif(navigator.mediaDevices){\n\tnavigator.mediaDevices.getUserMedia({\n\t\tvideo:true,\n\t\taudio:true\n\t}).then(stream =>{\n\t\tconsole.log(0)\n\t\taddVideoStream(myVideo , stream)\n\t\tstreamClient = stream\n\t}).catch(err=>{\n\t\tconsole.log(\"Error:\" , err)\n\t})\n}\n\nmyPeer.on('open' , id=>{\n\tconsole.log(1)\n\tprops.socket.send(JSON.stringify({\n\t\ttype:'join-room',\n\t\tdata:[props.roomID , props.ID]\n\t  }))\n})\n\n// myPeer.on('call' , call =>{\n// \tconsole.log(2)\n// \tcall.answer(streamClient)\n// \tconst video = document.createElement('friend')\n// \tcall.on('stream' , userVideoStream =>{\n// \t\taddVideoStream(video , userVideoStream)\n// \t})\n// })\n\n\nfunction connectToNewUser(userId ,stream) {\n\tconsole.log(3)\n\tconst call = myPeer.call(userId ,stream)\n\tconst video = document.getElementById('friend')\n\tcall.on('stream' , userVideoStream =>{\n\t\taddVideoStream(video , userVideoStream)\n\t})\n\tcall.on('close' ,()=>{\n\t\tvideo.remove()\n    })\n    setPeer(call)\n}\n\n function addVideoStream(video , stream) {\n\tvideo = document.getElementById('me')\n\tvideo.muted = true\n\n \tvideo.srcObject = stream\n \tvideo.addEventListener('loadedmetadata',() =>{\n \t\tvideo.play();\n \t})\n }\n\n props.socket.addEventListener('message' , event =>{\n\tconst messageObj = JSON.parse(event.data)\n\tswitch (messageObj.type) {\n\t\tcase 'user-connected':\n\t\t\tconnectToNewUser(messageObj.data ,streamClient)\n\t\tbreak\n\t\tcase 'user-disconnected':\n\t\t\tif(peer) peer.close()\n\t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t}\n})\n\nreturn ('')\n}"]},"metadata":{},"sourceType":"module"}